/**
 * Typography Modules
 */

/**
 * Lines & Breaks
 */
.nowrap {
  white-space: nowrap;
}

.break-word {
  word-wrap: break-word;
}

/**
 * Fonts
 */
.font-heading {
  font-family: $header-font-family;
}

.font-body {
  font-family: $body-font-family;
}

/**
 * Links
 */
.no-visible-link {
  color: inherit;

  &:hover {
    text-decoration: none;
    color: inherit;
  }
}

.underlined-link {
  text-decoration: underline;
}

/**
 * Text Classes
 *
 * Note: There are color classes too.
 * These are found in colors.scss
 */

// Transform
.text-uppercase {
  text-transform: uppercase;
}

.text-lowercase {
  text-transform: lowercase;
}

.text-capitalize {
  text-transform: capitalize;
}

// Weights
.text-light {
  font-weight: $global-weight-light;
}

.text-normal {
  font-weight: $global-weight-normal;
}

.text-bold {
  font-weight: $global-weight-bold;
}

// Sizes
.text-xsmall {
  font-size: $text-xsmall;
}

.text-small {
  font-size: $text-small;
}

.text-base,
.text-medium {
  font-size: $global-font-size;
}

.text-large {
  font-size: $text-large;
}

.text-xlarge {
  font-size: $text-xlarge;
}

.text-xxlarge {
  font-size: $text-xxlarge;
}

.text-space-2x {
    line-height: 2;
}

// Shadows
.text-shadow {
    text-shadow: 0 .1em 1.5em rgba(51, 52, 71, .8);
}

/**
 * Icon Classes
 */
.icon {}

.icon-s {
  width: 1.125rem;
  height: 1.125rem;
}

.icon-m {
  width: 2rem;
  height: 2rem;
}

.icon-l {
  width: 4rem;
  height: 4rem;
}

/**
 * Header Classes
 */
.h1,
.h2,
.h3,
.h4,
.h5,
.h6 {
  font-family: $header-font-family;
  font-style: $header-font-style;
  font-weight: $header-font-weight;
  color: $header-color;
  text-rendering: $header-text-rendering;

  small {
    line-height: 0;
    color: $header-small-font-color;
  }
}

// Heading styles
@each $size, $headers in $header-styles {
  @include breakpoint($size) {
    @each $header, $header-defs in $headers {
      $font-size-temp: 1rem;
      .#{$header} {

        @if map-has-key($header-defs, font-size) {
          $font-size-temp: rem-calc(map-get($header-defs, font-size));
          font-size: $font-size-temp;
        } @else if map-has-key($header-defs, fs) {
          $font-size-temp: rem-calc(map-get($header-defs, fs));
          font-size: $font-size-temp;
        } @else if $size == $-zf-zero-breakpoint {
          font-size: $font-size-temp;
        }
        @if map-has-key($header-defs, line-height) {
          line-height: unitless-calc(map-get($header-defs, line-height), $font-size-temp);
        } @else if map-has-key($header-defs, lh) {
          line-height: unitless-calc(map-get($header-defs, lh), $font-size-temp);
        } @else if $size == $-zf-zero-breakpoint {
          line-height: unitless-calc($header-lineheight, $font-size-temp);
        }

        @if map-has-key($header-defs, margin-top) {
          margin-top: rem-calc(map-get($header-defs, margin-top));
        } @else if map-has-key($header-defs, mt) {
          margin-top: rem-calc(map-get($header-defs, mt));
        } @else if $size == $-zf-zero-breakpoint {
          margin-top: 0;
        }
        @if map-has-key($header-defs, margin-bottom) {
          margin-bottom: rem-calc(map-get($header-defs, margin-bottom));
        } @else if map-has-key($header-defs, mb) {
          margin-bottom: rem-calc(map-get($header-defs, mb));
        } @else if $size == $-zf-zero-breakpoint {
          margin-bottom: rem-calc($header-margin-bottom);
        }
      }
    }
  }
}